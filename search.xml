<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>第一篇博客</title>
    <url>/2021/11/29/%E6%9C%AC%E7%AB%99%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>暂无内容</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
  </entry>
  <entry>
    <title>关于网易的js逆向爬虫（爬取评论）</title>
    <url>/2021/12/15/%E7%BD%91%E6%98%93%E4%BA%91%E8%AF%84%E8%AE%BA%E7%88%AC%E8%99%AB%EF%BC%88JS%E9%80%86%E5%90%91%EF%BC%89%E4%B8%8A/</url>
    <content><![CDATA[<h2 id="关于网易的js逆向爬虫（爬取评论）"><a href="#关于网易的js逆向爬虫（爬取评论）" class="headerlink" title="关于网易的js逆向爬虫（爬取评论）"></a>关于网易的js逆向爬虫（爬取评论）</h2><p>这是本站的第一篇博客，可能会有很多补不足的地方，后面会持续修改，希望各位看官积极指出错误</p>
<p> <strong>1. 准备工具：</strong></p>
<ul>
<li><em>pychram</em></li>
<li><em>vscode（测试javascrip）</em></li>
<li><em>node.js</em></li>
<li><em>任意浏览器（推荐谷歌或者Edge）</em></li>
</ul>
<p>做好这些后要保证电脑上能运行python和Javascript<br>&lt; !– more –&gt;<br><strong>2. 知识储备：</strong></p>
<ul>
<li><em>python对网页请求过程</em></li>
<li><em>可以忽略的少量JS语法基础</em></li>
</ul>
<p><strong>3. 开始进行网页分析</strong><br>网址：<a href="https://music.163.com/#/discover/toplist?id=3778678">https://music.163.com/#/discover/toplist?id=3778678</a>（这是网易云热歌榜的评论爬取，网易云的无论是音乐还是评论还是其他的，加密代码都是一样的，仅以此为代表，可以稍加修改爬取不同内容）<br>进入网站，然后直接F12，然后点击<em>网络</em>，再点<em>刷新</em>，点击只查看<em>Fetch/XHR</em>，如下图所示：<br><img src="https://img-blog.csdnimg.cn/2be1281fcf654c7c90c587fa424241f9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUi43NDM=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>接着通过 <em>预览</em> 查看文件的内容，定位到其中这个 <strong>get…</strong> 文件 ，，如图：<br><img src="https://img-blog.csdnimg.cn/41cf01588ae3461eab982c3861e07f1b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUi43NDM=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>再查看标头，看里面的请求标头，嗯。。。。。都是正常参数，没有疑似加密的参数</p>
<p>还没完，请求标头中告诉我们，这是一个 <strong>POST</strong> 请求，所以继续查看提供的表单数据</p>
<p>点击 <strong>payload</strong><br><img src="https://img-blog.csdnimg.cn/edf21e23f6d74ed8a66f0b9fd0dfafc0.png" alt="POST请求"><br> <strong>payload</strong> 里面有连个参数，分别是<strong>params</strong>和<strong>encSecKey</strong>，一看就知道这是加密参数，既然如此我们进入他的发起程序找到加密位置进行破解</p>
<p>点击进入<strong>发起程序</strong>   如图：<br><img src="https://img-blog.csdnimg.cn/3d9ee8a1f609476ba1e9c86199829d28.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUi43NDM=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>先点击进入第一个，点击左下角的 <strong>{ }</strong> 对代码增加可读性，然后对代码中蓝色条所在一行打上断点，<br>重复，对前五个都进行相同操作。<br><img src="https://img-blog.csdnimg.cn/b986e8885ba84a1fa633c8116834215b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUi43NDM=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>点击刷新，观察出现的提示参数，如图：<br><img src="https://img-blog.csdnimg.cn/6f1818627a7f4543830307f4665aa2c5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUi43NDM=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>发现我们的需要的加密参数在这里，接下来观察如何生成的，如上图，我们注意 <strong>bum2x</strong> 这个参数，我们的加密参数都来自这个 <strong>bum2x</strong> ，在上图 <strong>13413</strong> 这一行当中，生成的方式是</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bUM2x = <span class="built_in">window</span>.asrsea(<span class="built_in">JSON</span>.stringify(i6c), bsG7z([<span class="string">&quot;流泪&quot;</span>, <span class="string">&quot;强&quot;</span>]), bsG7z(WW3x.md), bsG7z([<span class="string">&quot;爱心&quot;</span>, <span class="string">&quot;女孩&quot;</span>, <span class="string">&quot;惊恐&quot;</span>, <span class="string">&quot;大笑&quot;</span>]));</span><br></pre></td></tr></table></figure>
<p>我们将这行代码分解：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">加密函数: <span class="built_in">window</span>.asrsea()</span><br><span class="line">函数的参数: <span class="built_in">JSON</span>.stringify(i6c)</span><br><span class="line">		   bsG7z([<span class="string">&quot;流泪&quot;</span>, <span class="string">&quot;强&quot;</span>])</span><br><span class="line">		   bsG7z(WW3x.md)</span><br><span class="line">		   bsG7z([<span class="string">&quot;爱心&quot;</span>, <span class="string">&quot;女孩&quot;</span>, <span class="string">&quot;惊恐&quot;</span>, <span class="string">&quot;大笑&quot;</span>])</span><br></pre></td></tr></table></figure>
<p>先不管这四个参数，我们先看是函数如何加密的，如果简单就用Python重写，太复杂了就直接扣代码，做成JS脚本用Python的execjs包运行，在控制台输入<strong>window.asrsea()<strong>后直接给出了函数位置，直接进入查看，也可以把鼠标放在</strong>window.asrsea</strong>上，会自动给出函数位置，点击进入即可，如图<br><img src="https://img-blog.csdnimg.cn/35bed24ecc0548a4aa172cdedee021d1.png" alt="在这里插入图片描述"><br>进入后发现该函数其实是一个叫**d(d, e, f, g)**的函数，具体加密逻辑如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">function <span class="title">d</span><span class="params">(d, e, f, g)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> h = &#123;&#125;</span><br><span class="line">          , i = a(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">return</span> h.encText = b(d, g),</span><br><span class="line">        h.encText = b(h.encText, i),</span><br><span class="line">        h.encSecKey = c(i, e, f),</span><br><span class="line">        h</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们来分析一下函数实现过程：</p>
<blockquote>
<ol>
<li>函数里面有a(), b(),c()，三个未知函数</li>
<li>加密过程：i =a(16)，h.encText经历了两次b() 函数, h.encSecKey经历了一次c函数。</li>
</ol>
</blockquote>
<p>现在就需要将没有的函数找到用上文的方法，将鼠标放到函数上，可以自动显示位置<br><img src="https://img-blog.csdnimg.cn/c393e9bc53234644a90c8465e96be9e1.png" alt="在这里插入图片描述"><br>这里我们找到了a(),b(),c()函数的加密：<br><img src="https://img-blog.csdnimg.cn/b25ad4f700bc46f3b96ee89b4e228048.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUi43NDM=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>发现了什么，b(),c()里面还有不认识的函数，这样的情况，我们就不能再挨着分析去用python还原函数， <strong>我们可以利用另一个办法，将加密的js代码扣下来放到 js 文件里面，通过执行这个js文件获得加密参数，</strong> 这里就需要你的电脑有javascript的执行环境: node.js和VScode来做javascript的编译器，具体配置可以百度，这里不多做解释，我们将扣下来的js代码放入一个粘贴：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d, e, b = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>, c = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (d = <span class="number">0</span>; a &gt; d; d += <span class="number">1</span>)</span><br><span class="line">        e = <span class="built_in">Math</span>.random() * b.length,</span><br><span class="line">        e = <span class="built_in">Math</span>.floor(e),</span><br><span class="line">        c += b.charAt(e);</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c = CryptoJS.enc.Utf8.parse(b)</span><br><span class="line">      , d = CryptoJS.enc.Utf8.parse(<span class="string">&quot;0102030405060708&quot;</span>)</span><br><span class="line">      , e = CryptoJS.enc.Utf8.parse(a)</span><br><span class="line">      , f = CryptoJS.AES.encrypt(e, c, &#123;</span><br><span class="line">        <span class="attr">iv</span>: d,</span><br><span class="line">        <span class="attr">mode</span>: CryptoJS.mode.CBC</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> f.toString()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d, e;</span><br><span class="line">    <span class="keyword">return</span> setMaxDigits(<span class="number">131</span>),</span><br><span class="line">    d = <span class="keyword">new</span> RSAKeyPair(b,<span class="string">&quot;&quot;</span>,c),</span><br><span class="line">    e = encryptedString(d, a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params">d, e, f, g</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> h = &#123;&#125;</span><br><span class="line">      , i = a(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> h.encText = b(d, g),</span><br><span class="line">    h.encText = b(h.encText, i),</span><br><span class="line">    h.encSecKey = c(i, e, f),</span><br><span class="line">    h</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后，在末尾加上一个执行函数run()：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    dd=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    e=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    f=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    g=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    d1=d(dd,e,f,g);</span><br><span class="line"> 	data=&#123;</span><br><span class="line">            <span class="attr">params</span>: d1.encText,</span><br><span class="line">            <span class="attr">encSecKey</span>:d1.encSecKey</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">run()</span><br></pre></td></tr></table></figure>
<p>然后我们执行一下</p>
<blockquote>
<p>Uncaught ReferenceError: CryptoJS is not defined </p>
</blockquote>
<p>不出意外出错了，CryptoJS这个函数没有找到，在b()函数中调用了这个函数，则其实是一个外部包引入的函数，需要我们导入，全文也只有这CryptoJS函数需要外部导入，其他的都在文中可以复制得到，我们导入一下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install crypto-js<span class="comment">//在终端输入</span></span><br></pre></td></tr></table></figure>
<p>导入之后，还要再js文章中引入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">CryptoJS=<span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>再运行一下：</p>
<blockquote>
<p>setMaxDigits is not defined</p>
</blockquote>
<p>正常情况，我们回到浏览器，这setMaxDigits（）函数在c（）里面我们将鼠标放在函数上，按照之前的方法到函数所在的位置，将代码扣下来，粘贴直接，然后缺什么函数就去浏览器位置，找到这个函数然后粘贴过来，这里有个<strong>小技巧</strong> ：后面代码变多，遇到报错未定义函数时可用ctrl+f 查找函数在哪个函数里面被引用了，再浏览器找 比如：</p>
<blockquote>
<p>biToHex is not defined</p>
</blockquote>
<p>然后有几百行代码，<br><img src="https://img-blog.csdnimg.cn/2d4cf8d2a16e4c87bc5b76ea72438b6a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUi43NDM=,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们可以直接ctrl+f:<br><img src="https://img-blog.csdnimg.cn/a20abd782f3942c98d577bdfbd38b1ee.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUi43NDM=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>然后去浏览器，找到这个encryptedString(a, b)函数，然后利用之前的方法定位到函数位置，扣代码，粘贴，<br>最后大概到370多行代码的时候，成功运行，这里只是成功运行，但是没有输出任何东西，为什么？？<br>我们回到run() 函数，这个函数里面我们放入的参数dd,e,f,g,都是空的，我们接下来需要找到参数具体值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    dd=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    e=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    f=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    g=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    d1=d(dd,e,f,g);</span><br><span class="line"> 	data=&#123;</span><br><span class="line">            <span class="attr">params</span>: d1.encText,</span><br><span class="line">            <span class="attr">encSecKey</span>:d1.encSecKey</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">run()</span><br></pre></td></tr></table></figure>
<p>还知道我们怎么找到d() 函数的吗</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">d1=d(dd,e,f,g);</span><br></pre></td></tr></table></figure>
<p>是通过这个：<br><img src="https://img-blog.csdnimg.cn/cdb989d3d822444ca4abd246c5d6a5bd.png" alt="在这里插入图片描述"><br>然后放入里面的参数我们可以通过控制台找到，将四个参数扣下来，<br><img src="https://img-blog.csdnimg.cn/b411354cc2c74dc68bd57a1a03e4df4f.png" alt="在这里插入图片描述"><br>这里还有一个坑，我们看 <strong>网络</strong> 这块，<br><img src="https://img-blog.csdnimg.cn/3064ca6195de42ceaf48fbdd5227b6db.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUi43NDM=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>什么都没有，所以我们不知道是加载的哪个文件的加密参数，<br><img src="https://img-blog.csdnimg.cn/fe0060d4039c4e00898d0662ed48de07.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUi43NDM=,size_14,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这里除了batch都有加密参数，我们需要一个一个获得参数，再和文件相对应：<br><img src="https://img-blog.csdnimg.cn/7a17345b8a7c43ef98e46b3c9c87e298.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUi43NDM=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>照这样，每个对应起来，还可以发现，只有第一个dd参数发生改变，其他三个是不变的<br>我们找到我们爬取文件的dd:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&#123;&quot;</span>rid<span class="string">&quot;:&quot;</span>A_PL_0_3778678<span class="string">&quot;,&quot;</span>threadId<span class="string">&quot;:&quot;</span>A_PL_0_3778678<span class="string">&quot;,&quot;</span>pageNo<span class="string">&quot;:&quot;</span><span class="number">1</span><span class="string">&quot;,&quot;</span>pageSize<span class="string">&quot;:&quot;</span><span class="number">20</span><span class="string">&quot;,&quot;</span>cursor<span class="string">&quot;:&quot;</span>-<span class="number">1</span><span class="string">&quot;,&quot;</span>offset<span class="string">&quot;:&quot;</span><span class="number">0</span><span class="string">&quot;,&quot;</span>orderType<span class="string">&quot;:&quot;</span><span class="number">1</span><span class="string">&quot;,&quot;</span>csrf_token<span class="string">&quot;:&quot;</span><span class="string">&quot;&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<p>然后带入到run()代码中<br><img src="https://img-blog.csdnimg.cn/1621568359514d518dd518dd7606bb2f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUi43NDM=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>成功获得加密参数。</p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>js逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>关于网易云的js逆向爬虫（爬取评论）下</title>
    <url>/2022/02/03/%E6%9F%90%E6%98%93%E4%BA%91%E7%88%AC%E8%99%AB%EF%BC%88JS%E9%80%86%E5%90%91%EF%BC%89%E4%B8%8B/</url>
    <content><![CDATA[<h2 id="接着上一篇破解加密，接下来还有最后部分，没有看过上一篇文章的朋友可以先去看一下上一篇文章"><a href="#接着上一篇破解加密，接下来还有最后部分，没有看过上一篇文章的朋友可以先去看一下上一篇文章" class="headerlink" title="接着上一篇破解加密，接下来还有最后部分，没有看过上一篇文章的朋友可以先去看一下上一篇文章"></a>接着上一篇破解加密，接下来还有最后部分，没有看过上一篇文章的朋友可以先去看一下上一篇文章</h2><h3 id="本篇仅说明得到加密参数后的步骤"><a href="#本篇仅说明得到加密参数后的步骤" class="headerlink" title="本篇仅说明得到加密参数后的步骤"></a>本篇仅说明得到加密参数后的步骤</h3><h4 id="1-准备环境：pycharm，包：execjs-requests-csv"><a href="#1-准备环境：pycharm，包：execjs-requests-csv" class="headerlink" title="1.准备环境：pycharm，包：execjs, requests, csv"></a>1.准备环境：pycharm，包：execjs, requests, csv</h4><h4 id="2-具体步骤"><a href="#2-具体步骤" class="headerlink" title="2. 具体步骤:"></a>2. 具体步骤:</h4><ol>
<li>先介绍一下execjs这个包，这个包用来运行js代码，并获得运行结果，<br>这样我们先在python里面拿到加密参数：<br>&lt; !– more –&gt;   </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;comment.js&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	jsgo=execjs.<span class="built_in">compile</span>(f.read())</span><br><span class="line">	data=<span class="string">&#x27;&#123;&quot;rid&quot;:&quot;R_AL_3_37873787&quot;,&quot;threadId&quot;:&quot;R_AL_3_37873787&quot;,&quot;pageNo&quot;:&quot;1&quot;,&quot;pageSize&quot;:&quot;20&quot;,&quot;cursor&quot;:&quot;-1&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;orderType&quot;:&quot;1&quot;,&quot;csrf_token&quot;:&quot;&quot;&#125;&#x27;</span></span><br><span class="line">	res=jsgo.call(<span class="string">&#x27;run&#x27;</span>,data)</span><br><span class="line">	<span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p>这里的 <em><strong>run</strong></em> 就是我们在js文件里面编写的run函数，data是我们传入run函数的参数。</p>
<ol start="2">
<li>接下来，我们拿到了加密参数就可以直接发起请求了：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s=requests.Session()</span><br><span class="line">s.headers=headers</span><br><span class="line">resp=s.post(url=url,data=key)</span><br></pre></td></tr></table></figure>
<p>这里要注意一个地方就是，记得把headers自己copy过来<br>然后运行代码观察结果：<br><img src="https://img-blog.csdnimg.cn/e4cbd12debe242c39d9cd2b990a609bc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUi43NDM=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>不多不少，正好20条，可是，评论不只是20条呀，一定是有某个参数影响了，这时候我们把目光聚集到data:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data=<span class="string">&#x27;&#123;&quot;rid&quot;:&quot;R_AL_3_37873787&quot;,&quot;threadId&quot;:&quot;R_AL_3_37873787&quot;,&quot;pageNo&quot;:&quot;1&quot;,&quot;pageSize&quot;:&quot;20&quot;,&quot;cursor&quot;:&quot;-1&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;orderType&quot;:&quot;1&quot;,&quot;csrf_token&quot;:&quot;&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>很容易看出，这里有个pagesize,和pageno，就是我们的页数和一页多少条，前面的两个 <em><strong>id</strong></em> 就是 对不同的音乐，我们做一下更改（这里也是我为什么单独把data放在放在python而不是放在js里，方便调节更改嘛），然后观察是否有变化：<br><img src="https://img-blog.csdnimg.cn/8b90909aea1548c1809610b9af57de4e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUi43NDM=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>完美结束</p>
<ol start="3">
<li>最后关于网易云的js逆向就结束了，这是我在进入爬虫的第一个实战，整体难度是较容易的，之后网易云反爬和加密更新了我也会对这两篇文章进行更改，有任何错误的地方请指出哦</li>
</ol>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>js逆向</tag>
      </tags>
  </entry>
</search>
